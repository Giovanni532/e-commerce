generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  idUtilisateur     String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  utilisateur Utilisateur @relation(fields: [idUtilisateur], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String      @id @default(cuid())
  sessionToken  String      @unique
  utilisateurId String
  expires       DateTime
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
}

model Utilisateur {
  id            String     @id @default(cuid())
  nom           String?
  prenom        String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(USER)
  commandes     Commande[]
  avis          Avis[]

  @@map("utilisateurs")
}

model Categorie {
  id           Int       @id @default(autoincrement())
  nomCategorie String
  produits     Produit[]

  @@map("categories")
}

model Produit {
  id              Int        @id @default(autoincrement())
  nomProduit      String
  description     String
  prix            Float
  quantiteEnStock Int
  idCategorie     Int
  categorie       Categorie  @relation(fields: [idCategorie], references: [id], onDelete: Cascade)
  images          Image[]    @relation("ProduitImages")
  avis            Avis[]
  commandeProduits CommandeProduit[]

  @@map("produits")
}

model Paiement {
  id              Int      @id @default(autoincrement())
  idCommande      Int
  commande        Commande @relation(fields: [idCommande], references: [id])
  datePaiement    DateTime @default(now())
  montant         Float
  methodePaiement String

  @@map("paiements")
}

model Commande {
  id             Int               @id @default(autoincrement())
  dateCommande   DateTime          @default(now())
  idUtilisateur  String
  utilisateur    Utilisateur       @relation(fields: [idUtilisateur], references: [id])
  statutCommande String
  paiements      Paiement[]
  commandeProduits CommandeProduit[]
  prixTotal      Float

  @@map("commandes")
}

model CommandeProduit {
  id          Int      @id @default(autoincrement())
  idCommande  Int
  idProduit   Int
  quantite    Int
  prixUnitaire Float
  commande    Commande @relation(fields: [idCommande], references: [id], onDelete: Cascade)
  produit     Produit  @relation(fields: [idProduit], references: [id], onDelete: Cascade)

  @@map("commande_produits")
  @@unique([idCommande, idProduit])
}

model Avis {
  id            Int         @id @default(autoincrement())
  idProduit     Int
  produit       Produit     @relation(fields: [idProduit], references: [id], onDelete: Cascade)
  idUtilisateur String
  utilisateur   Utilisateur @relation(fields: [idUtilisateur], references: [id], onDelete: Cascade)
  note          Int
  commentaire   String
  dateAvis      DateTime    @default(now())

  @@map("avis")
}

model Image {
  id        Int      @id @default(autoincrement())
  urlImage  String
  produitId Int?
  produit   Produit? @relation("ProduitImages", fields: [produitId], references: [id], onDelete: Cascade)

  @@map("images")
}

enum Role {
  USER
  ADMIN
}
