generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("contacts")
}

model Utilisateur {
  id         String     @id @default(cuid())
  idFirebase String     @unique
  nom        String?
  prenom     String?
  email      String?    @unique
  image      String?
  adresse    String?
  ville      String?
  codePostal String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  role       Role       @default(USER)
  avis       Avis[]
  commandes  Commande[]

  @@map("utilisateurs")
}

model Categorie {
  id           Int       @id @default(autoincrement())
  nomCategorie String
  produits     Produit[]

  @@map("categories")
}

model SousCategorie {
  id               Int       @id @default(autoincrement())
  nomSousCategorie String
  produits         Produit[]

  @@map("sous-categories")
}

model Produit {
  id               Int               @id @default(autoincrement())
  nomProduit       String
  description      String
  prix             Float
  couleur          String
  etat             String
  taille           String
  statut           String            @default("En vente")
  idSousCategorie  Int
  idCategorie      Int
  urlsImages       String[]
  commandeProduits CommandeProduit[]
  categorie        Categorie         @relation(fields: [idCategorie], references: [id], onDelete: Cascade)
  sousCategorie    SousCategorie     @relation(fields: [idSousCategorie], references: [id], onDelete: Cascade)

  @@map("produits")
}

model Paiement {
  id              Int      @id @default(autoincrement())
  idCommande      Int
  datePaiement    DateTime @default(now())
  montant         Float
  methodePaiement String
  commande        Commande @relation(fields: [idCommande], references: [id])

  @@map("paiements")
}

model Commande {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  dateCommande     String
  idUtilisateur    String?
  email            String
  statut           String
  adresse          String
  ville            String
  codePostal       String
  dateLivraison    String
  prixTotal        Float
  commandeProduits CommandeProduit[]
  utilisateur      Utilisateur?      @relation(fields: [idUtilisateur], references: [id])
  paiements        Paiement[]

  @@map("commandes")
}

model CommandeProduit {
  id         Int      @id @default(autoincrement())
  idCommande Int
  idProduit  Int
  commande   Commande @relation(fields: [idCommande], references: [id], onDelete: Cascade)
  produit    Produit  @relation(fields: [idProduit], references: [id], onDelete: Cascade)

  @@unique([idCommande, idProduit])
  @@map("commande_produits")
}

model Avis {
  id            Int         @id @default(autoincrement())
  idUtilisateur String
  note          Int
  commentaire   String
  dateAvis      DateTime    @default(now())
  utilisateur   Utilisateur @relation(fields: [idUtilisateur], references: [id], onDelete: Cascade)

  @@map("avis")
}

enum Role {
  USER
  ADMIN
}
